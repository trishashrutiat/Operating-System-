#include<stdio.h>
#include<string.h>
int main()
{
        int wt[50], bt[50], i,j, n, temp,tat[50],tot=0,choice,priority[50];
        int process[50];
        int flag=1;
        while(flag)
        {
                int tot_wait_time = 0;
                float avg_wait_time = 0.0;
                float tot_turnaround_time = 0.0;
                float avg_turnaround_time = 0.0;
                printf("\nCPU scheduling algorithm:\n");
                printf("1) FCFS\n2) SJF\n3) Priority\n4)Exit\n");
                printf("\nEnter your choice:\n");
                scanf("%d", &choice);
                switch(choice)
                {
                        case 1:
                        {
                                printf("Enter the Number of Processes: ");
                                scanf("%d", &n);
                                for (i = 0; i < n; i++)
                                {
                                        printf("Enter the Process ID: ");
                                        scanf("%d", &process[i]);
                                        printf("Enter the Burst Time: ");
                                        scanf("%d", &bt[i]);
                                }
                                wt[0] = 0;
                                for (i = 1; i < n; i++)
                                {
                                        wt[i] = wt[i - 1] + bt[i - 1];
                                }
                                for(i=0;i<n;i++)
                                {
                                        tot_wait_time += wt[i];
                                }
                                for (i = 0; i < n; i++)
                                {
                                        tat[i] = bt[i] + wt[i];
                                        tot_turnaround_time += tat[i];
                                }
                                printf("\nProcess ID\tBurst Time\tWaiting Time\t\tTurn Around Time\n");
                                for (i = 0; i < n; i++)
                                {
                                        printf("%d\t\t%d\t\t%d\t\t%d\n", process[i], bt[i], wt[i],tat[i]);
                                }
                                avg_wait_time=tot_wait_time/n;
                                printf("Average Waiting Time is %.2f\n",avg_wait_time);
                                printf("Turn Around Time is %.2f\n", tot_turnaround_time/n);
                                break;
                        }
                        case 2:
                        {
                                printf("Enter the Number of Processes: ");
                                scanf("%d", &n);
                                for (i = 0; i < n; i++)
                                {
                                        printf("Enter the Process ID: ");
                                        scanf("%d", &process[i]);
                                        printf("Enter the Burst Time: ");
                                        scanf("%d", &bt[i]);
                                }
                                for (i = 0; i < n - 1; i++)
                                {
                                   int min_index = i;
                                   for (j = i + 1; j < n; j++)
                                   {
                                      if (bt[j] < bt[min_index])
                                      {
                                         min_index = j;
                                      }
                                   }
                                   int temp_bt = bt[i];
                                   bt[i] = bt[min_index];
                                   bt[min_index] = temp_bt;

                                   temp=process[i];
                                   process[i]=process[min_index];
                                   process[min_index]=temp;
                                }
                                wt[0] = 0;
                                for (i = 1; i < n; i++)
                                {
                                   wt[i] = wt[i - 1] + bt[i - 1];
                                }
                                for (i = 0; i < n; i++)
                                {
                                   tat[i] = bt[i] + wt[i];
                                   tot_wait_time += wt[i];
                                   tot_turnaround_time += tat[i];
                                }
                                printf("\nProcess ID\tBurst Time\tWaiting Time\tTurnaround Time\n");
                                for (i = 0; i < n; i++)
                                {
                                   printf("%d\t\t%d\t\t%d\t\t%d\n", process[i], bt[i], wt[i], tat[i]);
                                }
                                avg_wait_time = (float)tot_wait_time / n;
                                avg_turnaround_time = (float)tot_turnaround_time / n;
                                printf("Average Waiting Time: %.2f\n", avg_wait_time);
                                printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);
                                break;

                        }
                        case 3:
                        {
                                printf("Enter the Number of Processes: ");
                                scanf("%d", &n);
                                for (i = 0; i < n; i++)
                                {
                                   printf("Enter the Process ID: ");
                                   scanf("%d", &process[i]);
                                   printf("Enter the Burst Time: ");
                                   scanf("%d", &bt[i]);
                                }
                                for (i = 0; i < n; i++)
                                {
                                   printf("Enter the Priority of the process:");
                                   scanf("%d",&priority[i]);
                                }
                                for (i = 0; i < n - 1; i++)
                                {
                                   int min_index = i;
                                   for (j = i + 1; j < n; j++)
                                   {
                                      if (priority[j] < priority[min_index])
                                      {
                                         min_index = j;
                                      }
                                   }
                                   int temp_bt = bt[i];
                                   bt[i] = bt[min_index];
                                   bt[min_index] = temp_bt;
                                   int temp_priority = priority[i];
                                   priority[i] = priority[min_index];
                                   priority[min_index] = temp_priority;
                                   temp=process[i];
                                   process[i]=process[min_index];
                                   process[min_index]=temp;

                                }
                                wt[0] = 0;
                                for (i = 1; i < n; i++)
                                {
                                   wt[i] = wt[i - 1] + bt[i - 1];
                                }
                                for (i = 0; i < n; i++)
                                {
                                   tat[i] = bt[i] + wt[i];
                                   tot_wait_time += wt[i];
                                   tot_turnaround_time += tat[i];
                                }
                                printf("\nProcess ID\t\tBurst Time\t\tWaiting Time\t\tTurnaround Time\t\tPriortity\n");
                                for (i = 0; i < n; i++)
                                {
                                   printf("%d\t\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d\n", process[i], bt[i], wt[i], tat[i] ,priority[i]);
                                }
                                avg_wait_time = (float)tot_wait_time / n;
                                avg_turnaround_time = (float)tot_turnaround_time / n;
                                printf("Average Waiting Time: %.2f\n", avg_wait_time);
                                printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);
                                break;
                        }
                        case 4:
                        {
                                printf("\nExiting");
                                flag=0;
                                break;
                        }
                        default:
                                printf("Invalid choice.\n");
                }
        }
        return 0;
}
